1. What is npm?
npm (Node Package Manager) is a tool used to manage packages (libraries, tools, or frameworks) for JavaScript projects. It helps developers:

Install dependencies (npm install) for their project.
Share their own packages with others.
Manage versions and updates of installed packages.
Think of npm as an app store for JavaScript libraries.

2. What is Parcel/Webpack? Why do we need it?
Both Parcel and Webpack are bundlers, tools that take your JavaScript, CSS, HTML, and other assets and bundle them into one or more optimized files for production.
We need them because:

They combine multiple files into fewer files to improve performance.
They optimize code (e.g., remove unused code, minify assets).
They handle compatibility for older browsers.
For example, if you write modern ES6+ JavaScript, these tools convert it to older JavaScript that older browsers can understand.
3. Why is .parcel-cache?
The .parcel-cache folder stores cached data to make subsequent builds faster. Parcel doesn't reprocess unchanged files, which saves time during development.
It’s like a shortcut map that speeds up future builds by avoiding repetitive tasks.

4. What is npx?
npx is a tool that comes with npm. It allows you to run Node.js commands or packages directly without installing them globally.
For example:

bash
Copy
Edit
npx create-react-app my-app
This runs create-react-app without installing it permanently.

5. What is the difference between dependencies and devDependencies?
dependencies: Packages your project needs to run in production (e.g., React, Express).
devDependencies: Packages needed only for development (e.g., testing libraries like Jest, bundlers like Webpack).
They’re separated to avoid installing unnecessary packages in production, saving space and improving performance.

6. What is Tree Shaking?
Tree Shaking is a process of removing unused code from your project during the bundling phase.
For example:
If you import only add() from a math library, Tree Shaking removes other unused functions like subtract() or multiply(). This makes your final code smaller and faster.

7. What is Hot Module Replacement (HMR)?
HMR allows you to update parts of your code (e.g., CSS or JavaScript) in the browser without refreshing the entire page.
For example:

Change a button’s color in CSS.
HMR updates only that CSS file, so you see changes instantly without losing app state.
8. Favourite 5 Superpowers of Parcel
Zero Configuration: Parcel works out of the box without extra setup.
Blazing Fast Builds: It uses multicore processing and caching to make builds faster.
HMR: Instantly reflect changes during development without full reloads.
Tree Shaking: Removes unused code automatically.
Built-in Code Splitting: Splits code into smaller chunks, loading only what’s needed.
Explain any 3:

Zero Configuration: You don’t need to write complex configurations like in Webpack; Parcel works automatically.
HMR: Saves time during development by instantly applying updates.
Blazing Fast Builds: Parcel uses smart caching, so it doesn’t reprocess unchanged files, speeding up builds.
9. What is .gitignore? What should we add and not add into it?
.gitignore specifies files and folders that Git should ignore (not track).

Add into .gitignore:

node_modules/ (dependencies can be installed later).
.parcel-cache/ (build-related cache files).
.env (stores sensitive environment variables).
Do not add:

Source code or important project files.
10. What is the difference between package.json and package-lock.json files?
package.json: Lists project dependencies, scripts, and metadata.
package-lock.json: Locks specific versions of dependencies for consistency across all environments.
11. Why should I not modify package-lock.json?
package-lock.json ensures all developers use the exact same dependency versions. Modifying it manually can lead to inconsistent builds or errors.

12. What is node_modules? Is it a good idea to push that on Git?
node_modules contains all installed dependencies.
No, it’s not a good idea to push it to Git because:

It makes the repository size unnecessarily large.
Other developers can install the same dependencies using npm install.
13. What is the dist folder?
The dist (distribution) folder contains the final, optimized files ready for deployment (e.g., minified CSS, JS). These files are generated by bundlers like Parcel or Webpack.

14. What is browserslist?
browserslist is a configuration file that specifies the browsers your project should support. Tools like Parcel use it to ensure compatibility by transpiling modern code into versions that older browsers can understand.

15. Read about different bundlers: Vite, Webpack, Parcel
Vite: Fast development server and build tool with ES modules.
Webpack: Powerful but requires configuration.
Parcel: Beginner-friendly with zero configuration.
16. Read about ^-caret and ~-tilde
^ (Caret): Allows updates to newer minor versions. Example: ^1.2.0 includes 1.3.0 but not 2.0.0.
~ (Tilde): Allows updates to newer patch versions. Example: ~1.2.0 includes 1.2.1 but not 1.3.0.
17. Read about Script types in HTML (MDN Docs)
In HTML, <script> can have attributes like:

type="module" for modern ES modules.
defer to load the script after the HTML is parsed.
async for parallel loading.