In this we will learn how to add styles to our application   

To add styles in our app one way is 
Sass -> Synatically awesome style sheets 

Writing css with some super powers. Writing css becomes litter more advanced and litter more easy 


There is other way to write css in industry and that is known as style components

styled-components


There are other ways: 

react component library 

matrial UI  
bootstrap 
chakra UI 

Alot of big companies use different libraries and frameworks. These are CSS libraries and frameworks that have component that are already beautiful like we have prebuilt button in which there is styling done already 


We will learn about tailwind CSS which is a CSS frameworks. IT works with other frameworks as well 

postcss -> a tool for transforming css with JavaScript

write > npm install tailwindcss @tailwindcss/postcss  
above will be used to install tailwind with only specefic bundler which is parcel 

when we will do npx tailwind init it will create a tailwind.config.js for us 
This is the condig file for tailwind css 

We have to configure both postcssrc and tailwind.config.js 

postcss is a way through which parcel will understand tailwind

css disadvantage : The code becomes look very ugly and there is a inital learning 
advantage: U can apply css in same jsx file we dont need to go anywhere 

It is very lighhtweight as when parcel will make the bundle of css. It will only include the css that is required on our web page 


====================================

For here we will start learning Episode 11- Data is the new oil 

We will learn how to manage data in your application

First Concet: Higher order Components

Higher order components is a function that takes a component inside and returns a component 

takes a components as an input and then it enhances that component, add some features to that component and returns it back 

We will make a higher order component that will take a existing card and will return a card in which promoted will be written on it (The res will be promoted if the rating of it will be higher than 4.3)



I have modified RestaurantCard.js

// import React from "react";

import { RES_IMG } from "../utils/constants";

const RestaurantCard = (props) => {
  const { cloudinaryImageId, name, cuisines, avgRating, sla } =
    props?.resdata?.info;

  return (
    <div className="res-card p-4 w-[250px] bg-gray-200  m-4 rounded-xl hover:bg-gray-300">
      <img
        className="h-[200px] w-[100%] rounded-lg"
        src={RES_IMG + cloudinaryImageId}
      />
      <h3 className="font-bold py-3">{name}</h3>
      <h4>{cuisines.join(", ")}</h4>
      <h4>{avgRating}</h4>
      <h5>{sla.deliveryTime}</h5>
    </div>
  );
};

export const CardwithLabel = (RestaurantCard) => {
  return (props) => {
    return (
      <div>
        <label className="absolute bg-black text-white px-2 rounded -lg m-2">
          Promoted
        </label>
        <RestaurantCard {...props}></RestaurantCard>
      </div>
    );
  };
};

export default RestaurantCard;



And now in the body.js

this editing we have done 

 return (
            <Link key={res.info.id} to={"/restro/" + res.info.id}>
              {res.info.avgRating > 4.3 ? (
                <LabeledCard resdata={res} />
              ) : (
                <RestaurantCard resdata={res}></RestaurantCard>
              )}
            </Link>
          );
        })}


======================================

Now we will learn what is controlled and unControlled components
and will learn how to life the state up  

An important part of react application is to manage its data 
UI doesn't have its logic of its own. You give some jsx and it is just be on that page . Ui is different part and data is diff part inside react application


All the react application have two layers:

One is UI layer 
Another one is the data layer 

And this UI layer is powered by data layer 

This data layer consists of your props ,states , your local variables. Whatever data in your application is the data layer 

If you know how to manage data in your application. Then your application will be super fast 

IN this episode we will learn how to manage data properly in our application


We will be filtering out all the item category 

For each cateogry we will build an Accordian item:

When we will click on the header it should hide and show 

Now we want that the other accordians should automattically close when i open other accordian 

U should install react developers tools

In profile in developers console in flamegraph whatever u do inside your react app it will record it 


All the restaurant category are maintaining their own states 

Because the power of collapse is here in the restaurant category

The recommended component is controling the item list and another category is not aware about what is happening in the recommended component

I want another category state to life it up 

I dont want to give power of show and collapse item list to this recommanded

Right now Restaurantcategory have the power to show and collapse item list 

I want to give this power to restaurant menu 

Right now each of the restaurant cateogry is controlling itself. I want 

Restaurant Menu to control all the restro 

I will pass boolean value showItems to Restaurantcategory if that showitems is true then there items list will be shown other wise not and this control will be given parent restaurant menu 

Controlled and unControlled Components 


Now Restaurantcategory is a controlled component as this is controlled by restromenu component 

WHen it was having its own state , then restro menu doesnt have the control of Restaurantcategory

If the Restaurantcategory was controlling itself, it would have been a unControlled comp  

If i take away this power of controlling the state on their own 
then it is relying on its parent for controlling its state 

can i modify the state variables of my parent from my children 

We are lifting the state upp 

HOMEWORK: Build slide up functionaly of restaurant category. IT is pending 


We will learn about prop drilling 

In real world react application there are alots of components. They have a different hierarchy . Components inside component , alot of components nested inside it. Passing data from one component to another component is a very big challenge. React has one way data flow. 

In react data is passed from parents to children,
their children to their children 

similiary data flow in one direction from top to bottom 

we have restro menu page , so this restro menu page passed data to restrocategory and this restrocategory pass data to restrolist 

If i have dummy data inside restromenu and i want to access that data inside my item list 

I cant directly acess that dummy data. I have to pass it via intermediate parent.

But if there are many components and there is 8,9 levels of nesting. So the data have to be passed through every component that comes on to the path from source to destination and the component have nothing to do with that dummy data 

This concept is known as prop drilling 
There is a problem with prop drilling . If there are only 2,3 level then its okay but not okay for more levels '

But if my data is present somewhere and i want to access that data 

IN a large application there is a scenaria where we have some kind of global data that i can access from anywhere doens'not maatter where i am 

For that react gives a super power and that super power is known as react context.

We use context which is like a global place where your data is kept and anybody can access it and that is known as react context 

Lets us understand how we can make our data layer more powerful with this react context 

There can be some data that is needed in every page. For ex:

logged in user 
Theme 

There is some data that we need anywhere in our app. For that data we hold it inside a context and that context can be used anywhere in our app.

lets create a context inside utils and lets call this as userContext that will kept the information of the logged in user 


React gives us access to a imp uitlity function that is createContext to create user context 

import { createContext } from "react";

const UserContext = createContext({

      loggedInUser : "Default User"
})

export default UserContext;


Now if we want to access this data in other component lets say in header

For accessing that information react gives us hook   -> userContext

I can get the context data anywhere in my app  , 

storing the data in a globalobject we can say to remember but dont tell in interview 

Should we keep all the data inside context 

If we will keep all the data inside conetext then we dont need props 
but thats not the case 



only the data which you are using at
 multiple places only that is usied inside context 

 But the thing is u can access it anywhere we want to 

 will this context will availbe in about us page also 

 But about us page is made up of class based component so technique willbe differnet 

 first import the user context 

 and then in render () if you want to use it 

 There are two ways to access that context. One way is using a hook

 2) -> like this 

 <div>
        LoggestInUser :
         <UserContext.Consumer>
          {(data)=>{
            return <h1 className="font-bold text-2xl">{data.loggedInUser}</h1>
          }}
        </UserContext.Consumer>
        </div>

    

What if i dont want to use the default value of user , what if i logge in as a user if i have authenticated code written 
so how to modify this contxt if logging in , 


Making a APi call to check whether the user if logged in or not 

we will import UserContext in root file 

UserContext.provider . I am orverride an old value with the  new value 

we will wrap our whole proej with UserContext.provider and inside it pass it as a prop name value = {{
  loggedInUser : userName
}}


const AppLayout = () => {
  const [userName, setUserName] = useState("DefaultUser");

  useEffect(() => {
    // made a fetch call and send the username and password

    const data = {
      name: "Aarush Goel",
    };

    setUserName(data.name);
  }, []);

  return (
    <UserContext.Provider
      value={{
        loggedInUser: userName,
      }}
    >
      <div className="app">
        <Header></Header>
        <Outlet />
      </div>
    </UserContext.Provider>
  );
};


if i am wrapping context provider only in Header then the new value will only be inside header not in other components

all the other value will be default value 

If i use my provider for a specefic context i can use that too 

Context is the global space i can provide to whole app or just the small portion of our app 
I can create multiple context 
I can create new context for header
And i can override anywhere we wantto  

which makes it performant 


It depends on where you have provided your userContext 

  return (
    <UserContext.Provider
      value={{
        loggedInUser: userName,
      }}
    >
      <div className="app">
      <UserContext.Provider value={{
        loggedInUser : "Elon Musk"
      }}>
        <Header></Header>
      </UserContext.Provider>
        <Outlet />
      </div>
    </UserContext.Provider>
  );
};

in the above code the name for header will be elon musk and for the rest of the app it will be userName , and if user is not authenticated then the name will be default 

Lets create an input box and try to modify our username with input box 

It will also uppdate about us page and even during initial render only home page was loaded not the about us page due to lazy loading 


