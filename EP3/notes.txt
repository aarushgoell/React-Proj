npx parcel index.html

above will create a development build for us and host it to localhost 1234

npx means we are executing a npm package parcel and given a source file as index.html 

for prod build the command will be 

npx parcel build index.html

instead of writing this again and again we write script then we will not use npx parcel index.html 
we will can use diff script
one for build
one for prod 

we have created a script start which will run our project in development mode and another script build for run our project in production mode
If you are working in a company 
If u dont know how to run the code then just go to package.json and look for script . You will get the exact command to run the code 

add this in package.json 
"scripts": {
    "start" : "parcel index.html",
    "build" : "parcel build index.html",
    "test": "jest"
  },


  do run npm run start 

  by this the script will be called which parcel index.html 

  u can also do npm start but it works onlyu for start 

   what is a react element 

  suppose in our browser i want to see a h1 tag with heading 

  const heading = React.createElement("h1",{id : "heading"},"Namaste Aarush");

   react element is a html element ? No 

   but it will create an js object and when we render this element to dom it becomes HTML 

  for render we have to create a root inside react 

  const root = ReactDOM.createRoot(document.getElementById("root"));

  root.render(heading);

  root.render will convert this object into HTML and push it to the browser . Push means it will replace actual content of div with react element 

  its very complex to write react element in this way , the syntax is not good 

  to help developers facebook community developed something known as JSX

jsx is a js syntax to create react element 

jsx is not a part of react. we can make any application without jsx also . But it makes developers life easy

jsx is a convention where we marge HTML and js together. 

How can we create a h1 tag using jsx 

const jsxHeading = <h1>namaste react using jsx </h1>

jsx is not html inside js 

jsx is a html like syntax 

when above piece of code is executed it becomes react element 

initially we have created a h1 tag inside react but now we have create a h1 tag inside jsx

 const heading = React.createElement("h1",{id : "heading"},"Namaste Aarush");


above code is equal to below code 


const jsxHeading = <h1 id = "heading">Namaste Aarush </h1>

if u will do console.log(jsxHeading) then it will also a same js object like heading 

root.render(jsxHeading);

This is not pure js
js doesnot comes with jsx built inside it 


Your js engine doesnt understand jsx 

js engine only understand ecmascript 

so it will give error because browser cant understand jsx  

then how this below code is executed 
const jsxHeading = <h1 id = "heading">Namaste Aarush </h1>


parcel is doing its job behind the scenes

this code is transpiled before going to the js engine and js engine receives a code that browser can understand 

transpiled means the code is converted into a code that browser can understamd 

It is done by parcel but not alone .This responsibility is given to -> Babel is doing this 

babels job is to convert jsx code into react code 

const jsxHeading = <h1 id = "heading">Namaste Aarush </h1>

above code first jsx -> reactElement-> js object-> HTML element 


older browser cant understand modern es6 so 
bablel also convert es6 code to a code that older browser can understand 

babel is imp package after parcel 

if u want to give className then u can give it is as 

const jsxHeading = <h1 className = "head"> Namaste react</h1>

className will be changed to class during rendering 

if u want to give attributes to jsx we use camelCase and we dont use , 

If we want to write jsx in multiple lines then wrap it inside curly braces (<h1 className = "head"> 
Namaste react
</h1>)



React component 

Everything is a component in react. IF u will see a webpage button, header is a component. A footer,card ,heading ,input box ,searchbar, everything is a component . If there is a list of card thats is also a component 

There are two types of components 

classBased Components- old way of writing components 
Functional Components- new way 

class Based components using js classes 
functional compoents using js function create functional components 


// React functional component

react functional component is just a normal js function

whenever u are creating a functional Component or any react component name with a capital letter other wise it will give error 

It is a react way to undertand it is a functional component 

react functional component is a normal js function which return some jsx code 

const HeadingComponent  = ()=>{
  return (
    <h1>namaste react using functional component</h1>
  )
}

const root = createRoot(document.getElementById("root"));

root.render(<HeadingComponent/>);

functional  component -> function which return a react element -> object-> HTML element 


If there is only one line in your arrow function then

const HeadingComponent  = ()=> <h1>namaste react using functional component</h1>


const HeadingComponent  = ()=>{
  return (
    <h1>namaste react using functional component</h1>
  )
}

const HeadingComponent  = ()=>(
    <h1>namaste react using functional component</h1>
  )


All 3 above are same 


root.render(HeadingComponent); //-> This is wrong this is not react element . THis is a functional component and all the components are rendered like this below 
root.render(<HeadingComponent/>)

console.log(<HeadingComponent/>)// same object like react element



//

U can also do like this 


const Title = ()=>{
  return (
    <h1>This is the title</h1>
  )
} 

const HeadingComponent  = ()=>{
  return (
    <div>
      <Title></Title>
      <h1>namaste react using functional component</h1>
    </div>
  )
}

const root = createRoot(document.getElementById("root"));

root.render(<HeadingComponent/>);

Writing component like this -> <HeadingComponent/>

or like -> <HeadingComponent></HeadingComponent>

Both are same 

Above code is also known as component composition -> when a component is inside another component

we can also use like components like 



const HeadingComponent  = function(){
  return (
    <div>
      <Title></Title>
      <h1>namaste react using functional component</h1>
    </div>
  )
}

Inside jsx u can write javascript 
but inside curly braces {}

like 

const HeadingComponent  = function(){
  return (
    <div> 
    <h1>{1+1}</h1>
      <Title></Title>
      <h1>namaste react using functional component</h1>
    </div>
  )
}

If u want to write react element inside component then just write element inside this {}

as react element is just variable and to write js we use {}

->

const HeadingComponent  = function(){
  return (
    <div> 
    {Reactelement}
     <Title></Title>
      <h1>namaste react using functional component</h1>
    </div>
  )
}


suppose the data is coming from APi and APi sends some malicious data and we directly injected that data inside jsx 

jsx takes care of injection attacks . jsx will escape it . Jsx will not blindly run it . It will sanitize it .It will present cross site scripting 

U can write multiple components inside components 


const HeadingComponent  = function(){
  return (
    <div> 

      {Title()}
     <Title/>
     <Title></Title>
     <Title></Title>
     <Title></Title>
     <Title></Title>
     <Title></Title>
     <Title></Title>
      <h1>namaste react using functional component</h1>
    </div>
  )
}

These 3 things are same for writing components
 {Title()} -> inside jsx 
     <Title/>
     <Title></Title>


Our code is readable because of JSX 